---
layout: post
title: "[EN] [ASP.NET MVC] Custom output cache provider"
date: 2011-09-13 11:42:00 +02:00
categories: ASP.NET MVC
author: "Julien Corioland"
identifier: 8867090b-cf98-4312-b2d5-ccebf74a3505
redirect_from:
  - /archives/en-aspnet-mvc-custom-output-cache-provider
  - /Archives/en-aspnet-mvc-custom-output-cache-provider
---

Since ASP.NET 4 was released it’s possible to write custom output cache providers to change the way data are cached. For example, one of my customer wanted that some actions were cached on the file system to avoid loss of cache during an application pool reboot.

Be careful by using the following code because in many scenarios it can’t be used `as it is` (in a web farm, for example).

A custom output cache provider is a simple class that inherits from **OutputCacheProvider** and overrides these methods :

- **Add** : adds an entry in the cache
- **Get** : gets an entry from the cache
- **Remove** : removes an entry from the cache
- **Set** : updates an entry in the cache

Cached items must be serializable. In this sample, the following class will be used :

```csharp
[Serializable]
public class CachedItem
{
public object Item { get; set; }
public DateTime UtcExpiry { get; set; }
}
```

In order to save an item on the file system the two following methods will be used. The first allows to get a file path from the cache key (generated by asp.net) and the second allows to save a CachedItem on the disk :

```csharp
private string GetFilePathFromKey(string key)
{
foreach (var invalidChar in Path.GetInvalidFileNameChars())
key = key.Replace(invalidChar, '_');

return Path.Combine(CacheDirectory, key);
}

private void SaveCachedItem(CachedItem cachedItem, string filePath)
{
if (File.Exists(filePath))
File.Delete(filePath);

using (var stream = File.OpenWrite(filePath))
{
var binaryFormatter = new BinaryFormatter();
binaryFormatter.Serialize(stream, cachedItem);
}
}
```

*The Add method :*

```csharp
public override object Add(string key, object entry, DateTime utcExpiry)
{
string filePath = GetFilePathFromKey(key);
var cachedItem = GetCachedItem(filePath);

if (cachedItem != null && cachedItem.UtcExpiry.ToUniversalTime() <= DateTime.UtcNow)
{
Remove(key);
}
else if (cachedItem != null)
{
return cachedItem.Item;
}

SaveCachedItem(new CachedItem()
{
Item = entry,
UtcExpiry = utcExpiry
}, filePath);

return entry;
}
```

*The Get method :*

```csharp
public override object Get(string key)
{
string filePath = GetFilePathFromKey(key);
var cachedItem = GetCachedItem(filePath);
if (cachedItem != null)
{
if (cachedItem.UtcExpiry.ToUniversalTime() <= DateTime.UtcNow)
{
Remove(key);
}
else
{
return cachedItem.Item;
}
}

return null;
}
```

*The Remove method :*

```csharp
public override void Remove(string key)
{
string filePath = GetFilePathFromKey(key);
if (File.Exists(filePath))
File.Delete(filePath);
}
```

*The Set Method :*

```csharp
public override void Set(string key, object entry, DateTime utcExpiry) {
string filePath = GetFilePathFromKey(key);
var cachedItem = new CachedItem() {Item = entry, UtcExpiry = utcExpiry};
SaveCachedItem(cachedItem, filePath);
}
```

Now that the output cache provider is created, it can be registered in the web.config file of the application, in the **caching** section :

```xml
<system.web>
<caching>
<outputCache>
<providers>
<add name="FileSystemOutputCacheProvider"
type="Samples.FileSystemOutputCacheProvider, Samples"/>
</providers>
</outputCache>
</caching>
```

The last step consists to override the **GetOutputCacheProviderName** method in the Global.asax file. Actually this method is called by the ASP.NET Framework when an OutputCache attribute (or an OutputCache directive) is used. The method returns the name of the output cache provider to use in the current context. For example, if you want to use the FileSystemOutputCacheProvider for the Details action of the Products controller, you can use this code :

```csharp
public override string GetOutputCacheProviderName(HttpContext context)
{
if (context.Request.RawUrl.ToUpper().Contains("PRODUCTS/DETAILS")) {
return "FileSystemOutputCacheProvider";
}
return base.GetOutputCacheProviderName(context);
}
```

As mentioned previously you just have to set an OutputCache attribute on the action Details of the Products controller to use the custom output cache provider :

```csharp
public class ProductsController : Controller
{
[OutputCache(Duration = 3600, VaryByParam = "id")]
public ActionResult Details(int id)
{
//long operation
Thread.Sleep(2000);

ViewBag.ProductId = id;
return View();
}
}
```

[Download the source code here.](http://juliencorioland.blob.core.windows.net/publicfiles/SampleOutputCacheProvider.zip)

Hope this helps ![image](/images/en-aspnet-mvc-custom-output-cache-provider/50cfe4ee-2887-4f52-8f11-e17f9521a233.jpg)

